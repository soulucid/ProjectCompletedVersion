/***
 * 
 * @author Yingyi Zhang
 * @username yxz559
 * @studentID 1544458
 * 
 */

package controller;

import java.awt.geom.Point2D;
import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageTree;
import org.apache.pdfbox.pdmodel.PDResources;
import org.apache.pdfbox.pdmodel.graphics.PDXObject;
import org.apache.pdfbox.pdmodel.graphics.image.PDImage;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;
import org.apache.pdfbox.tools.imageio.ImageIOUtil;
import org.apache.pdfbox.cos.COSName;
import org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine;
import org.apache.pdfbox.pdmodel.graphics.form.PDTransparencyGroup;
import org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask;


public class PDFExtracter {
    
    private int counter = 1;

    public static void main(String[] args) throws IOException {

        PDFExtracter pdfExt = new PDFExtracter();
        pdfExt.extract();
        
    }
    
    private void extract() throws IOException {
        
        String sourcePath = "/home/FinalProject/FinalProject/workspace/PDFs/1-s2.0-S1093326316302364-main.pdf";
//      String destinationDir = "/home/FinalProject/FinalProject/workspace/Images/";
        File originPDF = new File(sourcePath);
        
        if (originPDF.exists()) {
            
            PDDocument document = null;
            
            try {
                
                document = PDDocument.load(originPDF);
                for (int i = 0; i < document.getNumberOfPages(); i++) {
                    
                    PDPage page = document.getPage(i);
                    ImageGraphicsEngine extractor = new ImageGraphicsEngine(page);
                    extractor.run();
                    
                }
                
            }
            
            finally {
                
                if(document != null) {
                    
                    document.close();
                    
                }
            }
        }
    
        else {
        
            System.err.println("The PDF file does not exist.");
        
        }
    }
    
    private class ImageGraphicsEngine extends PDFGraphicsStreamEngine {
        
        protected ImageGraphicsEngine(PDPage page) throws IOException {
            super(page);
        }

        public void run() throws IOException {
            
            PDPage page = getPage();
            processPage(page);
            PDResources res = page.getResources();
            for (COSName name : res.getExtGStateNames()) {
                
                PDSoftMask softMask = res.getExtGState(name).getSoftMask();
                
                if (softMask != null) {
                    
                    PDTransparencyGroup group = softMask.getGroup();
                    
                    if (group != null) {
                        processSoftMask(group);
                    }
                }
            }
       }

        @Override
        public void drawImage(PDImage pdImage) throws IOException {
            
            if (pdImage instanceof PDImageXObject) {
                
                PDImageXObject xobject = (PDImageXObject)pdImage;

                // Save the image
                String prename
                imageCounter++;

                System.out.println("Writing image: " + name);
                write2file(pdImage, name, directJPEG);
            }
            
        }

        @Override
        public void appendRectangle(Point2D arg0, Point2D arg1, Point2D arg2, Point2D arg3)
                throws IOException
        {
            // TODO Auto-generated method stub
            
        }

        @Override
        public void clip(int arg0) throws IOException
        {
            // TODO Auto-generated method stub
            
        }

        @Override
        public void closePath() throws IOException
        {
            // TODO Auto-generated method stub
            
        }

        @Override
        public void curveTo(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5)
                throws IOException
        {
            // TODO Auto-generated method stub
            
        }

        @Override
        public void endPath() throws IOException
        {
            // TODO Auto-generated method stub
            
        }

        @Override
        public void fillAndStrokePath(int arg0) throws IOException
        {
            // TODO Auto-generated method stub
            
        }

        @Override
        public void fillPath(int arg0) throws IOException
        {
            // TODO Auto-generated method stub
            
        }

        @Override
        public Point2D getCurrentPoint() throws IOException
        {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public void lineTo(float arg0, float arg1) throws IOException
        {
            // TODO Auto-generated method stub
            
        }

        @Override
        public void moveTo(float arg0, float arg1) throws IOException
        {
            // TODO Auto-generated method stub
            
        }

        @Override
        public void shadingFill(COSName arg0) throws IOException
        {
            // TODO Auto-generated method stub
            
        }

        @Override
        public void strokePath() throws IOException
        {
            // TODO Auto-generated method stub
            
        }
    }

}
